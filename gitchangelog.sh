#!/bin/bash
BIN=`basename $0`
FILE_FORMAT="markdown"
BASE_URL=""
COMMIT_URL=""
COMPARE_URL=""
FROM_ID=""
TO_ID=""
REV_RANGE=""
OLD_ID=""
NEW_ID=""
ADD_CHANGELOG_URL=0
ADD_COMMIT_URL=1
TMP_LOG_FILE="/tmp/gitlog.tmp"
TMP_OUTPUT_FILE="/tmp/gitlog.output.md"
SHOW_HELP=0

ADD_IDX=0
REMOVE_IDX=1
FIX_IDX=2
CHANGE_IDX=3
ENHANCE_IDX=4

SECTIONS[$ADD_IDX]="New features"
SECTIONS[$REMOVE_IDX]="Removed features"
SECTIONS[$FIX_IDX]="Fixed bugs"
SECTIONS[$CHANGE_IDX]="Changes"
SECTIONS[$ENHANCE_IDX]="Implemented enhancements"

LINES[$ADD_IDX]=""
LINES[$REMOVE_IDX]=""
LINES[$FIX_IDX]=""
LINES[$CHANGE_IDX]=""
LINES[$ENHANCE_IDX]=""


# parse command line
while [ $# -gt 0 ]
do
	key="$1"
	case $key in
		# output file format
		'--file-format')
			FILE_FORMAT="$2"
			shift # past argument
			;;
		# from
		'-f'|'--from')
			FROM_ID="$2"
			shift # past argument
			;;
		# to
		'-t'|'--to')
			TO_ID="$2"
			shift # past argument
			;;
		# Add changelog url
		'--add-changelog-url')
			ADD_CHANGELOG_URL=1
			;;
		# Don't add commits' URLs
		'--no-commit-url')
			ADD_COMMIT_URL=0
			;;
		# display help
		'-h'|'--help')
			SHOW_HELP=1
			;;
		# output format
		*)
			# unknown option
			;;
	esac
	shift # past argument or value
done

# display help ?
if [ $SHOW_HELP -ne 0 ]; then
	echo "usage: $BIN [OPTION]"
	echo ""
	echo "Option list:"
	echo "  --file-format <format>    Specify output file format."
	echo "                            <format> can be markdown or html."
	echo "                            Default is markdown."
	echo "  -f, --from <revision>     Specify a git revision to start from."
	echo "  -t, --to <revision>       Specify a git revision to end."
	echo "  --add-changelog-url       Add a URL to access the full GIT changelog."
	echo "  --no-commit-url           Don't a URL to access each commit."
	echo "  -h, --help                Display this help and exit."
	echo ""
	exit 1
fi

# Make sure GIT client is installed
if [ -z `which git` ]; then
	>&2 echo "ERROR: Please install git client"
	exit -1
fi

# check output file format
case $FILE_FORMAT in
	# markdown
	'md' | 'markdown')
		;;
	# html
	'html')
		# make sure mkd2html is installed
		if [ -z `which mkd2html` ]; then
			>&2 echo "ERROR: Please install mkd2html"
			exit -1
		fi
		;;
	# unknown file format
	*)
		>&2 echo "ERROR: Unknown output file format : $FILE_FORMAT"
		exit -1
		;;
esac

# use a revision range 
if [ -n "$FROM_ID" ] || [ -n "$FROM_ID" ]; then
	REV_RANGE="$FROM_ID...$TO_ID"
fi

# get the repo URL
BASE_URL=`git config --get remote.origin.url`
if [ -z "$BASE_URL" ]; then
	>&2 echo "ERROR: Failed to fetch repository URL. Might not be a GIT repository."
	exit 1
fi

if [[ $BASE_URL =~ "@" ]]; then
	BASE_URL="`echo $BASE_URL | awk -F":" '{print $1}'`://`echo $BASE_URL | awk -F"@" '{print $2}'`"
fi

LENGTH=${#BASE_URL}
if [ ${BASE_URL:$LENGTH-4:4} == ".git" ]; then
	BASE_URL=${BASE_URL:0:$LENGTH-4}
fi

COMMIT_URL="$BASE_URL/commit"
COMPARE_URL="$BASE_URL/compare"

# Get the git history
# pretty format : https://www.kernel.org/pub/software/scm/git/docs/git-log.html#_pretty_formats
git log --pretty=format:"%H %s" $REV_RANGE > $TMP_LOG_FILE
if [ $? -ne 0 ]; then
	>&2 echo "ERROR: Failed getting repo history"
	exit -1
fi
echo "" >> $TMP_LOG_FILE

# Analyze history line per line
shopt -s nocasematch
while read CMD; do
 	COMMIT_ID=`echo $CMD | awk '{print $1}'`
 	COMMIT_ID_SHORT=${COMMIT_ID:0:8}
 	COMMIT_MSG=`echo $CMD | sed -e 's/^'$COMMIT_ID' //'`
 	COMMIT_TAG=`echo $COMMIT_MSG | awk -F"[][]" '{print $2'}`
 	COMMIT_MSG=`echo $COMMIT_MSG | sed -e 's/^\['$COMMIT_TAG'\] //'`
	
	if [ -z $NEW_ID ]; then
		NEW_ID=$COMMIT_ID_SHORT
	fi
	
	OLD_ID=$COMMIT_ID_SHORT
	
 	case $COMMIT_TAG in
		'add' | 'added') 
			IDX=$ADD_IDX
			;;
		'fix' | 'fixed') 
			IDX=$FIX_IDX
			;;
		'change' | 'changed') 
			IDX=$CHANGE_IDX
			;;
		'remove' | 'removed') 
			IDX=$REMOVE_IDX
			;;
		'enhance' | 'enhancement') 
			IDX=$ENHANCE_IDX
			;;
		*)
			IDX=-1
			;;
 	esac
 	
 	# store commit message
 	if [ -1 -lt $IDX ]; then
		LINES[$IDX]="${LINES[$IDX]}- $COMMIT_MSG"
		
		if [ $ADD_COMMIT_URL -ne 0 ]; then
			LINES[$IDX]="${LINES[$IDX]} ([$COMMIT_ID_SHORT]($COMMIT_URL/$COMMIT_ID))"
		fi
		
		LINES[$IDX]="${LINES[$IDX]}\n"
 	fi
done < $TMP_LOG_FILE

shopt -u nocasematch

# output header
echo -e "## vx.x.x\n" > $TMP_OUTPUT_FILE

# Add full change log URL
if [ $ADD_CHANGELOG_URL -ne 0 ]; then
	echo -e "[Full change log]($COMPARE_URL/$OLD_ID...$NEW_ID)\n" >> $TMP_OUTPUT_FILE
fi

# output sections
IDX=0
while [ $IDX -lt ${#LINES[@]} ] 
do
	if [ -n "${LINES[$IDX]}" ]; then
		echo -e "**${SECTIONS[$IDX]}**\n" >> $TMP_OUTPUT_FILE
		echo -e "${LINES[$IDX]}" >> $TMP_OUTPUT_FILE
	fi

	(( IDX=IDX+1 ))
done 

# output footer
echo -e "\nChangelog automatically generated by [git_changelog](https://github.com/agambier/gitchangelog)" >> $TMP_OUTPUT_FILE


# convert it ?
case $FILE_FORMAT in
	# html
	'html')
		# make sure mkd2html is installed
		mkd2html "$TMP_OUTPUT_FILE"
		if [ $? -ne 0 ]; then
			>&2 echo "ERROR: Failed to convert to HTML"
			exit -1
		fi
		
		TMP_OUTPUT_FILE=`echo $TMP_OUTPUT_FILE | sed -e 's/\.md/\.html/'`
		;;
esac

# display it
cat $TMP_OUTPUT_FILE
